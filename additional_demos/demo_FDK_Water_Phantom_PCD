% Inputs 
% signal present 3D 
% signal absent 3D 
% ground truth 2D 

close all
clear all
clc
restoredefaultpath 

mfilename = '/home/sriharsha.marupudi/TIGRE-master/MATLAB';

load_coords_filename =  '/LCD_CT/data/coordinates/coordinates_20241008.mat';


%% Load your data
load('data_Iodine_Water_Validation_3_20241015_Recon_Binned.mat', 'img_low_binned');
img = (img_low_binned(:,:,200:210));  

% Convert to HU 
% P_water_actual = 75;  
% P_air_actual = -10;       
% 
% HU_water = 0;
% HU_air = -1000;
% 
% m = (HU_air - HU_water) / (P_air_actual - P_water_actual);
% b = HU_water - m * P_water_actual;
% 
% convertToHU = @(P) m * P + b;
% 
% img = convertToHU(img);

figure; imagesc(img(:,:,5)); colormap gray; axis off; axis tight; axis equal;

%% Mask Image to remove container 
[rows, cols, slices] = size(img);   
centerX = round(cols / 2);
centerY = round(rows / 2);
radius = min(rows, cols) / 2;

[X, Y] = meshgrid(1:cols, 1:rows);
circularMask = (X - centerX).^2 + (Y - centerY).^2 <= radius^2;

maskedImage = zeros(size(img));

for k = 1:slices
    currentSlice = img(:,:,k);
    maskedSlice = zeros(size(currentSlice)); 
    maskedSlice(circularMask) = currentSlice(circularMask);  
    maskedImage(:,:,k) = maskedSlice;  
end

figure;
imagesc(maskedImage(:,:,5));  
colormap gray; axis off; axis tight; axis equal; 
title('Masked Image');

%% Threshold masked image to get inserts 
th = 100; %if not HU 
% th = 300;  % if HU Threshold value
diskSize = 5;  % Disk size for morphological operations
areaThreshold = 50;  % Minimum area for keeping objects in mask

maskedImage_ground_truth = mean(maskedImage(:,:,1:10), 3);
binaryMask = maskedImage_ground_truth > th;

% Remove small objects from the binary mask
cleanedMask = bwareaopen(binaryMask, areaThreshold);  

% Apply morphological closing to smooth the mask
se = strel('disk', diskSize);  
cleanedMask = imclose(cleanedMask, se);

cleanedGrayscaleImage = zeros(size(maskedImage_ground_truth));
cleanedGrayscaleImage(cleanedMask) = img(cleanedMask);

figure;
imshow(cleanedGrayscaleImage, []);
colormap(gray);
title('Cleaned Grayscale Image');

ground_truth = cleanedGrayscaleImage;

%% Signal Free Image 
% Apply insert locations to original image and set inserts to 0 

signalFreeMask = ~cleanedMask; 
signalFreeImage = zeros(size(img));  

for k = 1:slices
    currentSlice = maskedImage(:,:,k);
    maskedSlice = zeros(size(currentSlice)); 
    maskedSlice(signalFreeMask) = currentSlice(signalFreeMask);  
    signalFreeImage(:,:,k) = maskedSlice;  
end

figure;
imagesc(signalFreeImage(:,:,5));   
colormap(gray); axis equal; axis tight; axis off; 
title('Signal Free Image');


%% Specify observers to use
observers = {LG_CHO_2D()};
% observers = {LG_CHO_2D(), DOG_CHO_2D(), GABOR_CHO_2D(), ... };

%% Specify base directory and run the measurement
base_directory = '/your/base/directory/path';  % Adjust to your actual base directory

offset = 0; 
n_reader = 10; 
n_inserts = 6; 
insert_r = 30; 
res_table = measure_LCD1(maskedImage, signalFreeImage, observers, ground_truth, offset,n_reader, n_inserts,insert_r,load_coords_filename);
 

%% Plot and summarize results
% Plot results
custom_insert_names = {'5 Rod', '5 Solution','7.5 Rod', '7.5 Solution', '10 Rod', '10 Solution'}; % mg/mL of iodine inserts 
set_ylim = [0 1.2];
plot_results1(res_table, [], custom_insert_names);

% Display results
res_table

% Summarize results
if ~is_octave
  groupsummary(res_table, ["observer", "insert_HU", "dose_level"],["mean", "std"])
end
%% or define a custom summary table by printing mean and standard deviation results
nreader = max(res_table.reader);
for i=1:6
    mean_AUC(i) = mean(res_table.auc([1:nreader]+(i-1)*nreader));
    std_AUC(i) = std(res_table.auc([1:nreader]+(i-1)*nreader));
    mean_snr(i) = mean(res_table.snr([1:nreader]+(i-1)*nreader));
    std_snr(i) = std(res_table.snr([1:nreader]+(i-1)*nreader));
end

insert_HU = res_table.insert_HU(1:nreader:end);
mean_AUC = mean_AUC(:);
std_AUC = std_AUC(:)
mean_snr = mean_snr(:);
std_snr = std_snr(:)
AUC_res = table(insert_HU, mean_AUC, std_AUC, mean_snr, std_snr);
AUC_res


